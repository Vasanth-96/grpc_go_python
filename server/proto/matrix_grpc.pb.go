// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.15.8
// source: matrix.proto

package matrix

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MatrixService_MultiplyMatrices_FullMethodName = "/matrix.MatrixService/MultiplyMatrices"
)

// MatrixServiceClient is the client API for MatrixService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatrixServiceClient interface {
	MultiplyMatrices(ctx context.Context, in *MatrixRequest, opts ...grpc.CallOption) (*MatrixResponse, error)
}

type matrixServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatrixServiceClient(cc grpc.ClientConnInterface) MatrixServiceClient {
	return &matrixServiceClient{cc}
}

func (c *matrixServiceClient) MultiplyMatrices(ctx context.Context, in *MatrixRequest, opts ...grpc.CallOption) (*MatrixResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MatrixResponse)
	err := c.cc.Invoke(ctx, MatrixService_MultiplyMatrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatrixServiceServer is the server API for MatrixService service.
// All implementations must embed UnimplementedMatrixServiceServer
// for forward compatibility
type MatrixServiceServer interface {
	MultiplyMatrices(context.Context, *MatrixRequest) (*MatrixResponse, error)
	mustEmbedUnimplementedMatrixServiceServer()
}

// UnimplementedMatrixServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatrixServiceServer struct {
}

func (UnimplementedMatrixServiceServer) MultiplyMatrices(context.Context, *MatrixRequest) (*MatrixResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiplyMatrices not implemented")
}
func (UnimplementedMatrixServiceServer) mustEmbedUnimplementedMatrixServiceServer() {}

// UnsafeMatrixServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatrixServiceServer will
// result in compilation errors.
type UnsafeMatrixServiceServer interface {
	mustEmbedUnimplementedMatrixServiceServer()
}

func RegisterMatrixServiceServer(s grpc.ServiceRegistrar, srv MatrixServiceServer) {
	s.RegisterService(&MatrixService_ServiceDesc, srv)
}

func _MatrixService_MultiplyMatrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatrixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatrixServiceServer).MultiplyMatrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MatrixService_MultiplyMatrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatrixServiceServer).MultiplyMatrices(ctx, req.(*MatrixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatrixService_ServiceDesc is the grpc.ServiceDesc for MatrixService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatrixService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matrix.MatrixService",
	HandlerType: (*MatrixServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MultiplyMatrices",
			Handler:    _MatrixService_MultiplyMatrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "matrix.proto",
}
